{"version":3,"sources":["logo.svg","components/PlayAgain.js","maths-utils.js","components/StarDisplay.js","components/PlayNumber.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PlayAgain","props","className","style","color","gameStatus","onClick","utils","sum","arr","reduce","acc","curr","range","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","StarDisplay","stars","map","starId","key","colors","available","used","wrong","candidate","PlayNumber","backgroundColor","status","number","Game","useState","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","useEffect","timerId","setTimeout","clearTimeout","setGameState","newCandidateNums","newAvailableNums","filter","n","includes","useGameState","candidatesAreWrong","onNumberClick","currentStatus","cn","startNewGame","num","App","gameId","setGameId","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0da35f30.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nconst PlayAgain = props => {\r\n    return <div className=\"game-done\">\r\n        <div\r\n            style={{ color: props.gameStatus === 'won' ? 'green' : 'red' }}\r\n            className='message'>\r\n            {props.gameStatus === 'won' ? 'Well done' : 'Game Over'}\r\n        </div>\r\n        <button onClick={props.onClick}>Play Again</button>\r\n    </div>\r\n}\r\n\r\nexport default PlayAgain;","\r\n\r\nconst utils = {\r\n  // Sum an array\r\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n\r\n  // create an array of numbers between min and max (edges included)\r\n  range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n\r\n  // pick a random number between min and max (edges included)\r\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n\r\n  // Given an array of numbers and a max...\r\n  // Pick a random sum (< max) from the set of all available sums in arr\r\n  randomSumIn: (arr, max) => {\r\n\tconst sets = [[]];\r\n\tconst sums = [];\r\n\tfor (let i = 0; i < arr.length; i++) {\r\n\t  for (let j = 0, len = sets.length; j < len; j++) {\r\n\t\tconst candidateSet = sets[j].concat(arr[i]);\r\n\t\tconst candidateSum = utils.sum(candidateSet);\r\n\t\tif (candidateSum <= max) {\r\n\t\t  sets.push(candidateSet);\r\n\t\t  sums.push(candidateSum);\r\n\t\t}\r\n\t  }\r\n\t}\r\n\treturn sums[utils.random(0, sums.length - 1)];\r\n  },\r\n};\r\n\r\n\r\nexport default utils;","import React from 'react';\r\nimport utils from '../maths-utils.js'\r\n\r\nconst StarDisplay = props => {\r\n\treturn <>\r\n\t\t{utils.range(1, props.stars).map(starId =>\r\n\t\t\t<div key={starId} className=\"star\" />)\r\n\t\t}\r\n\t</>\r\n}\r\n\r\nexport default StarDisplay;","import React from 'react';\r\n\r\n\r\n// Color Theme\r\nconst colors = {\r\n  available: 'lightgray',\r\n  used: 'lightgreen',\r\n  wrong: 'lightcoral',\r\n  candidate: 'deepskyblue',\r\n};\r\n\r\nconst PlayNumber = props => {\r\n  return <button className=\"number\"\r\n    style={{ backgroundColor: colors[props.status] }}\r\n    onClick={() => props.onClick(props.number, props.status)}>\r\n    {props.number}\r\n  </button>\r\n}\r\n\r\nexport default PlayNumber;","import React, { useState, useEffect } from 'react';\r\n\r\nimport PlayAgain from './PlayAgain'\r\nimport StarDisplay from './StarDisplay'\r\nimport PlayNumber from './PlayNumber'\r\nimport utils from '../maths-utils.js'\r\n\r\n\r\nconst useGameState = () => {\r\n  const [stars, setStars] = useState(utils.random(1, 9));\r\n  const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\r\n  const [candidateNums, setCandidateNums] = useState([]);\r\n  const [secondsLeft, setSecondsLeft] = useState(10);\r\n\r\n  useEffect(() => {\r\n    if (secondsLeft > 0 && availableNums.length > 0) {\r\n      const timerId = setTimeout(() => {\r\n        setSecondsLeft(secondsLeft - 1)\r\n      }, 1000);\r\n      return () => clearTimeout(timerId);\r\n    }\r\n\r\n  })\r\n\r\n\r\n  const setGameState = (newCandidateNums) => {\r\n    if (utils.sum(newCandidateNums) !== stars) {\r\n      setCandidateNums(newCandidateNums);\r\n    } else {\r\n      const newAvailableNums = availableNums.filter(\r\n        n => !newCandidateNums.includes(n)\r\n      );\r\n      setStars(utils.randomSumIn(newAvailableNums, 9));\r\n      setAvailableNums(newAvailableNums);\r\n      setCandidateNums([]);\r\n    }\r\n  }\r\n  return { stars, availableNums, candidateNums, secondsLeft, setGameState };\r\n}\r\n\r\nconst Game = (props) => {\r\n  const {\r\n    stars,\r\n    availableNums,\r\n    candidateNums,\r\n    secondsLeft,\r\n    setGameState\r\n  } = useGameState();\r\n\r\n\r\n  const candidatesAreWrong = utils.sum(candidateNums) > stars;\r\n  const gameStatus = availableNums.length === 0 ? 'won' :\r\n    secondsLeft === 0 ? 'lost' : 'active';\r\n  const numberStatus = num => {\r\n    if (!availableNums.includes(num)) {\r\n      return 'used';\r\n    }\r\n    if (candidateNums.includes(num)) {\r\n      return candidatesAreWrong ? 'wrong' : 'candidate';\r\n    }\r\n    return 'available';\r\n  }\r\n\r\n  const onNumberClick = (number, currentStatus) => {\r\n    if (gameStatus !== 'active' || currentStatus === 'used') {\r\n      return;\r\n    }\r\n    const newCandidateNums = currentStatus === 'available' ?\r\n      candidateNums.concat(number) :\r\n      candidateNums.filter(cn => cn !== number);\r\n\r\n    setGameState(newCandidateNums);\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"help\">\r\n        Pick 1 or more numbers that sum to the number of stars\r\n\t  </div>\r\n      <div className=\"body\">\r\n        <div className=\"left\">\r\n          {gameStatus !== 'active' ? (<PlayAgain onClick={props.startNewGame} gameStatus={gameStatus} />)\r\n            : (<StarDisplay stars={stars} />)}\r\n        </div>\r\n        <div className=\"right\">\r\n          {utils.range(1, 9).map(n =>\r\n            <PlayNumber\r\n              key={n}\r\n              number={n}\r\n              status={numberStatus(n)}\r\n              onClick={onNumberClick}\r\n            />\r\n          )\r\n          }\r\n\r\n        </div>\r\n      </div>\r\n      <div className=\"timer\">Time Remaining: {secondsLeft}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default Game;","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from './components/Game'\n\n\nconst App = () => {\n    const [gameId, setGameId] = useState(1);\n    return <Game key={gameId} startNewGame={() => setGameId(gameId + 1)} />\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}